{"version":3,"sources":["common.js","AppProvider.js","componets/Header.js","componets/Main.js","App.js","serviceWorker.js","index.js"],"names":["GAME_TYPES","ICON_CHARS","PLAYER_TURNS","getEmptyCells","cells","map","val","idx","filter","item","isMoveLeft","length","checkGameState","lines","i","a","b","c","position","iconType","isTie","getRandom","start","end","Math","floor","random","replace","index","value","slice","findRandomMove","emptyCells","minimax","depth","computerType","isMax","score","evaluate","best","lengthCells","nextCells","max","min","findBestMove","bestVal","bestMove","moveVal","AppContext","React","createContext","AppProvider","initState","gameType","currentIcon","playerTurn","Array","fill","gameState","state","changeType","type","initNewGame","humanPlay","newGame","initGame","timeout","clearTimeout","setTimeout","randomMove","computerPlay","setState","applyState","prevState","nextIcon","nextPlayerTurn","makeAIMove","this","Provider","props","children","Component","Header","className","style","context","visibility","onClick","contextType","Cell","Consumer","icon","isDoneClass","Board","boardRef","createRef","current","classList","add","remove","ref","Main","textInfo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbc5c977.chunk.js","sourcesContent":["export const GAME_TYPES = {\n  TWO_PLAYERS: 0,\n  VERSUS_COMPUTER: 1\n}\n\nexport const ICON_TYPES = {\n  O: 0,\n  X: 1\n}\n\nexport const ICON_CHARS = ['O', 'X'];\n\nexport const PLAYER_TURNS = {\n  HUMAN: 0,\n  COMPUTER: 1\n}\n\nconst getEmptyCells = (cells) => {\n  return cells\n    .map((val, idx) => [val, idx])\n    .filter(item => item[0] === null);\n}\n\nconst isMoveLeft = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n  return emptyCells.length > 0;\n}\n\nexport const checkGameState = (cells) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1 \n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6]  // d.d1\n  ];\n\n  let position = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (i >= 0 && i <= 2) position = `h h${i}`;\n      else if (i >= 3 && i <= 5) position = `v v${i - 3}`;\n      else position = `d${i - 6}`;\n\n      return {\n        position,\n        iconType: cells[a],\n        isTie: null\n      }\n    }\n  }\n\n  return {\n    position: \"\",\n    iconType: null,\n    isTie: isMoveLeft(cells) ? null : true\n  };\n}\n\nexport const getRandom = (start, end) => {\n  return start + Math.floor(Math.random() * (end - start));\n}\n\nexport const replace = (cells, index, value) => {\n  return [...cells.slice(0, index), value, ...cells.slice(index + 1, cells.length)];\n}\n\n/**\n * Random move\n */\nexport const findRandomMove = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n\n  if (emptyCells.length > 0) {\n    const randomNum = getRandom(0, emptyCells.length);\n    const index = emptyCells[randomNum][1];\n\n    return index;\n  }\n\n  return null;\n}\n\n/**\n * Find best move based on Minimax algorithm\n */\nconst evaluate = (cells, computerType) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1 \n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6]  // d.d1\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (cells[a] === computerType) return 10;\n      return -10;\n    }\n  }\n\n  return 0;\n}\n\nconst minimax = (cells, depth, computerType, isMax) => {\n  const score = evaluate(cells, computerType);\n\n  // If Maximizer has won the game return his/her evaluated score \n  if (score === 10) return score - depth;\n\n  // If Minimizer has won the game return his/her evaluated score \n  if (score === -10) return score + depth;\n\n  // If there are no more moves and no winner then it is a tie \n  if (!isMoveLeft(cells)) return 0;\n\n  const lengthCells = cells.length;\n  let best;\n\n  // If this maximizer's move \n  if (isMax) {\n    best = -1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, computerType);\n\n        // Call minimax recursively and choose the maximum value\n        best = Math.max(best, minimax(nextCells, depth + 1, computerType, !isMax));\n      }\n    }\n  } else {\n    best = 1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, 1 - computerType);\n\n        // Call minimax recursively and choose the minimum value\n        best = Math.min(best, minimax(nextCells, depth + 1, computerType, !isMax));\n      }\n    }\n  }\n\n  return best;\n}\n\nexport const findBestMove = (cells, computerType) => {\n  let bestVal = -1000;\n  let bestMove = null;\n\n  const lengthCells = cells.length;\n\n  for (let i = 0; i < lengthCells; i++) {\n    const cell = cells[i];\n\n    if (cell === null) {\n      // Make a move\n      const nextCells = replace(cells, i, computerType);\n\n      // Compute evaluation function for this move. \n      const moveVal = minimax(nextCells, 0, computerType, false);\n\n      // If the value of the current move is more than the best value, then update best\n      if (moveVal > bestVal) {\n        bestVal = moveVal;\n        bestMove = i;\n      }\n    }\n  }\n\n  return bestMove;\n}","import React, { Component } from 'react';\nimport {\n  GAME_TYPES, PLAYER_TURNS,\n  checkGameState, getRandom, replace,\n  findBestMove, findRandomMove\n} from './common';\n\nconst THINKING_TIME = 500;\n\nexport const AppContext = React.createContext();\n\nexport default class AppProvider extends Component {\n  initState = {\n    gameType: GAME_TYPES.VERSUS_COMPUTER,\n    currentIcon: getRandom(0, 2),\n    playerTurn: getRandom(0, 2),\n    cells: new Array(9).fill(null),\n    gameState: {\n      position: \"\",\n      iconType: null,\n      isTie: null,\n    },\n  }\n\n  state = {\n    gameType: this.initState.gameType,\n    currentIcon: this.initState.currentIcon,\n    playerTurn: this.initState.playerTurn,\n    cells: this.initState.cells,\n    gameState: this.initState.gameState,\n\n    changeType: (type) => {\n      if (this.state.gameType !== type) {\n        this.initNewGame(type);\n      }\n    },\n    humanPlay: (index) => {\n      this.humanPlay(index)\n    },\n    newGame: () => {\n      this.initNewGame(this.state.gameType);\n    }\n  }\n\n  initGame = () => {\n    if (this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(() => {\n        const randomMove = findRandomMove(this.state.cells);\n        this.computerPlay(randomMove);\n      }, THINKING_TIME);\n    }\n  }\n\n  initNewGame = (type = this.initState.gameType) => {\n    this.setState(() => {\n      return {\n        gameType: type,\n        currentIcon: getRandom(0, 2),\n        playerTurn: getRandom(0, 2),\n        cells: this.initState.cells,\n        gameState: this.initState.gameState,\n      }\n    }, () => {\n      this.initGame();\n    });\n  }\n\n  applyState = (prevState, index) => {\n    const cells = prevState.cells;\n    const nextIcon = 1 - prevState.currentIcon;\n    const nextPlayerTurn = 1 - prevState.playerTurn;\n    const nextCells = replace(cells, index, prevState.currentIcon);\n    const gameState = checkGameState(nextCells);\n\n    return {\n      gameState: gameState,\n      currentIcon: nextIcon,\n      playerTurn: nextPlayerTurn,\n      cells: nextCells\n    }\n  }\n\n  humanPlay = (index) => {\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\n      (this.state.gameType === GAME_TYPES.TWO_PLAYERS || this.state.playerTurn === PLAYER_TURNS.HUMAN)) {\n\n      this.setState(prevState => {\n        return this.applyState(prevState, index);\n      }, () => {\n        // Make a move for computer if the game is in 'versus computer' mode\n        if (this.state.gameState.position === \"\" &&\n          this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n          this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n          setTimeout(() => {\n            this.makeAIMove();\n          }, THINKING_TIME);\n        }\n      });\n    }\n  }\n\n  computerPlay = (index) => {\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\n      this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n      this.setState(prevState => this.applyState(prevState, index));\n    }\n  }\n\n  makeAIMove = () => {\n    const bestMove = findBestMove(this.state.cells, this.state.currentIcon);\n\n    if (bestMove !== null) {\n      this.computerPlay(bestMove);\n    }\n  }\n\n  componentDidMount() {\n    this.initGame();\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { AppContext } from '../AppProvider';\nimport { PLAYER_TURNS } from '../common';\nimport './Header.css';\n\n\nclass Header extends Component {\n  render() {\n    const hide = {\n      visibility: 'hidden'\n    }\n    const visible = {\n\n    }\n\n    return (\n      <header className=\"header\">\n        <h1>Tic Tac Toe</h1>\n        <div style={(this.context.gameState.isTie)||(this.context.gameState.position !== \"\" && this.context.playerTurn === PLAYER_TURNS.HUMAN) ? visible : hide} >\n          <button onClick={() => this.context.newGame()}>Restart Game</button>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.contextType = AppContext;\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { AppContext } from '../AppProvider';\nimport { GAME_TYPES, PLAYER_TURNS, ICON_CHARS } from '../common';\nimport './Main.css';\n\nconst ICON_PLACE_HOLDDER = 'I';\n\nconst Cell = (props) => {\n  return (\n    <AppContext.Consumer>\n      {context => {\n        const value = context.cells[props.index];\n        const icon = value !== null ? ICON_CHARS[value] : ICON_PLACE_HOLDDER;\n        const isDoneClass = icon !== ICON_PLACE_HOLDDER ? 'done' : '';\n\n        return (\n          <button\n            className={`cell cell-${props.index} ${isDoneClass}`}\n            onClick={() => context.humanPlay(props.index)}>\n            {icon}\n          </button>\n        )\n      }}\n    </AppContext.Consumer>\n  )\n}\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.boardRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.context.gameState.position !== \"\") {\n      setTimeout(() => {\n        this.boardRef.current.classList.add('full');\n      }, 50);\n    } else {\n      this.boardRef.current.classList.remove('full');\n    }\n  }\n\n  render() {\n    return (\n      <div className={`board ${this.context.gameState.position}`} ref={this.boardRef}>\n        <div className=\"board-row\">\n          <Cell index={0} />\n          <Cell index={1} />\n          <Cell index={2} />\n        </div>\n\n        <div className=\"board-row\">\n          <Cell index={3} />\n          <Cell index={4} />\n          <Cell index={5} />\n        </div>\n\n        <div className=\"board-row\">\n          <Cell index={6} />\n          <Cell index={7} />\n          <Cell index={8} />\n        </div>\n      </div>\n    )\n  }\n}\nBoard.contextType = AppContext;\n\nclass Main extends Component {\n  render() {\n    let textInfo = '';\n    const currentIconType = this.context.currentIcon;\n\n    if (this.context.gameState.isTie) {\n      textInfo = 'Tie!';\n    } else {\n        if (this.context.gameState.position === \"\") {\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `It's your turn`;\n          else textInfo = `It's computer turn`;\n        } else {\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `Computer win!`;\n          else textInfo = `You win!`;\n        }\n      }\n    \n\n    return (\n      <main className=\"main\">\n        <div className=\"info\">{textInfo}</div>\n          <Board />\n      </main>\n    );\n  }\n}\nMain.contextType = AppContext;\n\nexport default Main;\n","import React from 'react';\nimport Header from './componets/Header';\nimport './App.css';\nimport Main from './componets/Main';\nimport AppProvider from './AppProvider';\nfunction App() {\n\n  \n  return (\n      <AppProvider>\n         <div className=\"app\">\n          <Header />\n          <Main />\n         \n        </div>\n      </AppProvider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}